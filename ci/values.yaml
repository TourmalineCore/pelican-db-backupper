# Here you can find docs bitnami/nginx chart https://github.com/bitnami/charts/blob/main/bitnami/nginx/README.md

image:
  registry: ghcr.io
  repository: tourmalinecore/pelican-db-backupper
  tag: "latest"
  pullPolicy: Always
  debug: true

replicaCount: 1

# 1000m means 100% of processor time 
# 1m means 0.1% of processor time.
# at start pod is being allocated with resources from requests, if it needs more consumption can grow until limits.
# if pod uses more resources than limits in spite of the reason kube-system will perform a forced restart
resources:
  limits:
    cpu: 500m
    memory: 1Gi
  requests:
    cpu: 200m
    memory: 512Mi

livenessProbe:
  enabled: false

readinessProbe:
  enabled: false

service:
  type: ClusterIP

# not needed in this setup
serviceAccount:
  create: false

# not needed in this setup
networkPolicy:
  enabled: false

# CUSTOM: Here you store non secret env vars that will be passed to the pod's environment
extraConfigMapEnvVars:

# this is needed to tell the container to read extra env vars from the dedicated Config Map that we create in extraDeploy
extraEnvVarsCM: "{{ include \"common.names.fullname\" . }}"

podAnnotations:
  # this is needed to trigger re-deploy when only Config Map is changed
  # that is the file name generated by extraDeploy nginx/templates/extra-list.yaml
  # that is why it looks so weird in the file path to calculate hash by its content
  checksum/config: "{{ include (print $.Template.BasePath \"/extra-list.yaml\") . | sha256sum }}"

extraDeploy:
  # this creates Config Map from extraConfigMapEnvVars to be able to calculate checksum/config hash by env vars
  - |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: {{ include "common.names.fullname" . }}
      namespace: {{ include "common.names.namespace" . | quote }}
      labels: {{- include "common.labels.standard" . | nindent 6 }}
        {{- if .Values.commonLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 6 }}
        {{- end }}
      {{- if .Values.commonAnnotations }}
      annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 6 }}
      {{- end }}
    data:
      {{- if .Values.extraConfigMapEnvVars }}
      {{- include "common.tplvalues.render" ( dict "value" .Values.extraConfigMapEnvVars "context" $ ) | trim | nindent 6 }}
      {{- end }}
  - |
    apiVersion: v1
    kind: Secret
    metadata:
      name: pgsql-backup-secret
      namespace: local
    type: Opaque
    stringData:
        PG_HOST: "postgresql"
        PG_PASSWORD: "admin"
        PG_USER: "postgres"
        PG_DATABASE: "pelican_db"
        AWS_ACCESS_KEY_ID: "admin"
        AWS_SECRET_ACCESS_KEY: "rootPassword"
        AWS_BUCKET_NAME: "pelican-db-backup"
        AWS_HOST: "http://minio-s3:9000"
  - |
    apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: pgsql-backup-cron
      namespace: local
    spec:
      schedule: "*/1 * * * *"
      successfulJobsHistoryLimit: 2
      concurrencyPolicy: Replace
      jobTemplate:
        spec:
          template:
            spec:
              restartPolicy: OnFailure
              containers:
                - name: pgsql-backup-cron
                  image: ghcr.io/tourmalinecore/pelican-db-backupper:latest
                  env:
                    - name: PG_HOST
                      valueFrom:
                      secretKeyRef:
                          name: pgsql-backup-secret
                          key: PG_HOST
                    - name: PGPASSWORD
                      valueFrom:
                      secretKeyRef:
                          name: pgsql-backup-secret
                          key: PG_PASSWORD
                    - name: PG_USER
                      valueFrom:
                      secretKeyRef:
                          name: pgsql-backup-secret
                          key: PG_USER
                    - name: PG_DATABASE
                      valueFrom:
                      secretKeyRef:
                          name: pgsql-backup-secret
                          key: PG_DATABASE
                    - name: AWS_ACCESS_KEY_ID
                      valueFrom:
                      secretKeyRef:
                          name: pgsql-backup-secret
                          key: AWS_ACCESS_KEY_ID
                    - name: AWS_SECRET_ACCESS_KEY
                      valueFrom:
                      secretKeyRef:
                          name: pgsql-backup-secret
                          key: AWS_SECRET_ACCESS_KEY
                    - name: AWS_BUCKET_NAME
                      valueFrom:
                      secretKeyRef:
                          name: pgsql-backup-secret
                          key: AWS_BUCKET_NAME
                    - name: AWS_HOST
                      valueFrom:
                      secretKeyRef:
                          name: pgsql-backup-secret
                          key: AWS_HOST
                  imagePullPolicy: Never