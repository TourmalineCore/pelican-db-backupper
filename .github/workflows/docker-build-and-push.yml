name: build and push to dockerhub

on:
  push:
    branches:
      - test/*
  pull_request: 


jobs:
  push_to_registry:
    name: Push Docker image to GitHub Container Registry
    runs-on: ubuntu-22.04
    permissions:
      packages: write
      contents: read

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
        # multi-platform build configured using this https://docs.docker.com/build/ci/github-actions/multi-platform/
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ghcr.io/tourmalinecore/${{ github.event.repository.name }}
          tags: |
            # minimal (short sha)
            type=sha
            # full length sha
            type=sha,format=long
            # set latest tag for default branch
            # https://github.com/docker/metadata-action/issues/171 explains how to tag latest only on default branch
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          
  e2e_test:
    name: Run E2E tests
    needs: push_to_registry
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        env:
        POSTGRES_HOST_AUTH_METHOD: trust

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3 pytest

      - name: Configure AWS credentials for testing
        run: |
          mkdir -p ~/.aws
          echo "[default]\naws_access_key_id = test\naws_secret_access_key = test" > ~/.aws/credentials

      - name: Run local S3 server (minio)
        run: |
          docker run -d -p 9000:9000 -p 9090:9090 --name minio \
            -e "MINIO_ROOT_USER=test" \
            -e "MINIO_ROOT_PASSWORD=testtest" \
            minio/minio server /data --console-address ":9090"
            echo "Waiting for MinIO to be ready..."

          until curl -s http://localhost:9000/minio/health/live; do
            sleep 1
          done

      - name: Wait for services to be ready
        run: |
          docker exec minio mc alias set local http://localhost:9000 test testtest
          docker exec minio mc mb local/test-bucket
          sleep 10

      - name: Run e2e test
        env:
          DB_BACKUPS_FILENAME_PREFIX: test-backup
          DATABASE_HOST: localhost
          DATABASE_USERNAME: postgres
          DATABASE_PASSWORD: postgres
          DATABASE_NAME: testdb
          DESTINATION_DB_AWS_ACCESS_KEY_ID: test
          DESTINATION_DB_AWS_SECRET_ACCESS_KEY: testtest
          DESTINATION_DB_AWS_BUCKET_NAME: test-bucket
          DESTINATION_DB_AWS_ENDPOINT: http://localhost:9000
        run: |
          python pgsql-dump.py
          python -m pytest -v e2e_test.py